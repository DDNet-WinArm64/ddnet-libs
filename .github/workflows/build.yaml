name: Build

on: [push]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Update System
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y build-essential cmake ninja-build curl wget pkg-config unzip
      - name: Install MinGW
        run: |
          wget https://github.com/mstorsjo/llvm-mingw/releases/download/20240619/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar -xf llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
          echo "MINGW_ROOT=$(realpath llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/)" >> $GITHUB_ENV
          echo $(realpath llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/bin) >> $GITHUB_PATH
          echo CC=aarch64-w64-mingw32-clang >> $GITHUB_ENV
          echo CXX=aarch64-w64-mingw32-clang++ >> $GITHUB_ENV
          echo RC=aarch64-w64-mingw32-windres >> $GITHUB_ENV
          echo AR=aarch64-w64-mingw32-ar >> $GITHUB_ENV
          echo AS=aarch64-w64-mingw32-as >> $GITHUB_ENV
          echo RANLIB=aarch64-w64-mingw32-ranlib >> $GITHUB_ENV
          echo MINGW_SYSROOT=$(realpath llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/aarch64-w64-mingw32) >> $GITHUB_ENV
      - name: Download All Dependencies
        run: |
           wget http://libsdl.org/release/SDL2-2.30.5.tar.gz
           wget https://patch-diff.githubusercontent.com/raw/libsdl-org/SDL/pull/4306.diff
           wget https://curl.haxx.se/download/curl-8.8.0.tar.gz
           wget https://download.savannah.gnu.org/releases/freetype/freetype-2.13.2.tar.gz
           wget http://downloads.xiph.org/releases/ogg/libogg-1.3.5.tar.gz
           wget https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz
           wget https://downloads.xiph.org/releases/opus/opusfile-0.12.tar.gz
           wget https://www.sqlite.org/2024/sqlite-autoconf-3460000.tar.gz
           wget https://code.videolan.org/videolan/x264/-/archive/master/x264-master.tar.bz2
           wget https://ffmpeg.org/releases/ffmpeg-7.0.1.tar.gz
           wget https://github.com/warmcat/libwebsockets/archive/v4.3-stable.tar.gz
           wget https://download.sourceforge.net/libpng/libpng-1.6.43.tar.gz
           wget https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.gz
           wget https://github.com/google/brotli/archive/refs/tags/v1.1.0.tar.gz
           mkdir -p deps
           cd deps
           tar xvf ../SDL2-2.30.5.tar.gz
           tar xvf ../curl-8.8.0.tar.gz
           tar xvf ../libogg-1.3.5.tar.gz
           tar xvf ../opus-1.3.1.tar.gz
           tar xvf ../opusfile-0.12.tar.gz
           tar xvf ../freetype-2.13.2.tar.gz
           tar xvf ../sqlite-autoconf-3460000.tar.gz
           tar xvf ../x264-master.tar.bz2
           tar xvf ../ffmpeg-7.0.1.tar.gz
           tar xvf ../v4.3-stable.tar.gz
           tar xvf ../libpng-1.6.43.tar.gz
           tar xvf ../zlib-1.3.1.tar.gz
           tar xvf ../v1.1.0.tar.gz
           cd ..
           mkdir -p dist
           echo "DEPS_DIR=$(realpath deps)" >> $GITHUB_ENV
           echo "DIST_DIR=$(realpath dist)" >> $GITHUB_ENV
      - name: Build Brotli
        run: |
          cd ${DEPS_DIR}/brotli-1.1.0
          cmake -G Ninja -S . -B out -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_SYSROOT=${MINGW_SYSROOT} \
            -DCMAKE_C_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-clang \
            -DCMAKE_CXX_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-clang++ \
            -DCMAKE_RC_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-windres \
            -DCMAKE_AR=${MINGW_ROOT}/bin/aarch64-w64-mingw32-ar \
            -DCMAKE_RANLIB=${MINGW_ROOT}/bin/aarch64-w64-mingw32-ranlib \
            -DCMAKE_C_FLAGS="-w" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
            -DCMAKE_INSTALL_PREFIX=${MINGW_SYSROOT}
          cmake --build out --parallel
          cmake --install out --prefix ${MINGW_SYSROOT}
          cp out/libbrotlicommon.dll out/libbrotlidec.dll out/libbrotlienc.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libbrotlicommon.dll
          gendef ${DIST_DIR}/libbrotlidec.dll
          gendef ${DIST_DIR}/libbrotlienc.dll
          aarch64-w64-mingw32-dlltool -d libbrotlicommon.def -l ${DIST_DIR}/brotlicommon.lib -D ${DIST_DIR}/libbrotlicommon.dll
          aarch64-w64-mingw32-dlltool -d libbrotlidec.def -l ${DIST_DIR}/brotlidec.lib -D ${DIST_DIR}/libbrotlidec.dll
          aarch64-w64-mingw32-dlltool -d libbrotlienc.def -l ${DIST_DIR}/brotlienc.lib -D ${DIST_DIR}/libbrotlienc.dll
      - name: Build Zlib
        run: |
          cd ${DEPS_DIR}/zlib-1.3.1
          cmake -G Ninja -S . -B build -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_SYSROOT=${MINGW_SYSROOT} \
            -DCMAKE_C_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-clang \
            -DCMAKE_RC_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-windres \
            -DCMAKE_AR=${MINGW_ROOT}/bin/aarch64-w64-mingw32-ar \
            -DCMAKE_RANLIB=${MINGW_ROOT}/bin/aarch64-w64-mingw32-ranlib \
            -DCMAKE_C_FLAGS="-w" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY
          cmake --build build --parallel
          cp build/libzlibstatic.a ${MINGW_SYSROOT}/lib/libz.a
          cp *.h build/*.h ${MINGW_SYSROOT}/include
      - name: Build SDL2
        run: |
          cd ${DEPS_DIR}/SDL2-2.30.5
          ./configure --host=aarch64-w64-mingw32 --enable-ime 
          make -j$(nproc)
          cp build/.libs/SDL2.dll ${DIST_DIR}
          gendef ${DIST_DIR}/SDL2.dll
          aarch64-w64-mingw32-dlltool -d SDL2.def -l ${DIST_DIR}/SDL2.lib -D ${DIST_DIR}/SDL2.dll
      - name: Build cURL
        run: |
          cd ${DEPS_DIR}/curl-8.8.0
          env lt_cv_deplibs_check_method='pass_all' \
            ./configure --host=aarch64-w64-mingw32 --with-schannel \
            --enable-shared --disable-dict --disable-gopher \
            --disable-imap --disable-pop3 --disable-rtsp \
            --disable-smtp --disable-telnet --disable-tftp \
            --disable-smb --disable-ldap --enable-file --disable-static
          make -j$(nproc)
          cp lib/.libs/libcurl-4.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libcurl-4.dll
          aarch64-w64-mingw32-dlltool -d libcurl-4.def -l ${DIST_DIR}/curl.lib -D ${DIST_DIR}/libcurl-4.dll
      - name: Build Libogg
        run: |
          cd ${DEPS_DIR}/libogg-1.3.5
          ./configure --host=aarch64-w64-mingw32 
          make -j$(nproc) 
          cp src/.libs/libogg-0.dll ${DIST_DIR} 
          gendef ${DIST_DIR}/libogg-0.dll 
          aarch64-w64-mingw32-dlltool -d libogg-0.def -l ${DIST_DIR}/ogg.lib -D ${DIST_DIR}/libogg-0.dll
      - name: Build Opus
        run: |
          cd ${DEPS_DIR}/opus-1.3.1
          ./configure --host=aarch64-w64-mingw32 CFLAGS=-D_FORTIFY_SOURCE=0 
          make -j$(nproc) 
          cp .libs/libopus-0.dll ${DIST_DIR} 
          gendef ${DIST_DIR}/libopus-0.dll 
          aarch64-w64-mingw32-dlltool -d libopus-0.def -l ${DIST_DIR}/opus.lib -D ${DIST_DIR}/libopus-0.dll
      - name: Build Opusfile
        run: |
          cd ${DEPS_DIR}/opusfile-0.12
          env DEPS_LIBS="-lopus -logg -L${DIST_DIR}" \
              DEPS_CFLAGS="-I${DEPS_DIR}/opus-1.3.1/include -I${DEPS_DIR}/libogg-1.3.5/include" \
              ./configure --host=aarch64-w64-mingw32 --disable-http 
          make -j$(nproc) 
          cp .libs/libopusfile-0.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libopusfile-0.dll 
          aarch64-w64-mingw32-dlltool -d libopusfile-0.def -l ${DIST_DIR}/opusfile.lib -D ${DIST_DIR}/libopusfile-0.dll
      - name: Build Freetype
        run: |
          cd ${DEPS_DIR}/freetype-2.13.2
          ./configure --host=aarch64-w64-mingw32 \
            --prefix=${MINGW_SYSROOT} \
            CPPFLAGS="-I${MINGW_SYSROOT}/include" \
            LDFLAGS="-L${MINGW_SYSROOT}/lib" \
            --with-png=no --with-bzip2=no --with-zlib=no --with-harfbuzz=no
          make -j$(nproc)
          cp objs/.libs/libfreetype-6.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libfreetype-6.dll
          aarch64-w64-mingw32-dlltool -d libfreetype-6.def -l ${DIST_DIR}/freetype.lib -D ${DIST_DIR}/libfreetype-6.dll
      - name: Build SQLite
        run: |
          cd ${DEPS_DIR}/sqlite-autoconf-3460000
          export lt_cv_deplibs_check_method='pass_all'
          ./configure --host=aarch64-w64-mingw32 CFLAGS=-DSQLITE_OMIT_LOAD_EXTENSION
          make -j$(nproc)
          cp .libs/libsqlite3-0.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libsqlite3-0.dll
          aarch64-w64-mingw32-dlltool -d libsqlite3-0.def -l ${DIST_DIR}/sqlite3.lib -D ${DIST_DIR}/libsqlite3-0.dll
      - name: Build x264
        run: |
          cd ${DEPS_DIR}/x264-master
          env CFLAGS="-I${MINGW_SYSROOT}/include" \
            LDFLAGS="-L${MINGW_SYSROOT}/lib" \
            ./configure --enable-static --disable-cli --disable-gpl --disable-avs --disable-swscale --disable-lavf --disable-ffms \
            --disable-gpac --disable-lsmash --disable-interlaced --host=aarch64-mingw32 \
            --prefix=${MINGW_SYSROOT} \
            --cross-prefix=aarch64-w64-mingw32-
          make -j$(nproc)
          echo "X264_ROOT=$(realpath .)" >> $GITHUB_ENV
      - name: Build FFmpeg
        run: |
          cd ${DEPS_DIR}/ffmpeg-7.0.1
          env PKG_CONFIG_PATH=${X264_ROOT} \
            ./configure --disable-all --disable-alsa --disable-iconv --disable-libxcb \
            --disable-libxcb-shape --disable-libxcb-xfixes --disable-sdl2 --disable-xlib \
            --disable-zlib --enable-avcodec --enable-avformat --enable-encoder=libx264,aac \
            --enable-muxer=mp4,mov --enable-protocol=file --enable-libx264 --enable-swresample \
            --enable-swscale --enable-gpl --extra-cflags="-I${X264_ROOT}" \
            --extra-cxxflags="-I${X264_ROOT}" \
            --extra-ldflags="-L${X264_ROOT}" \
            --arch=aarch64 --target_os=mingw32 --cross-prefix=aarch64-w64-mingw32- \
            --disable-static --enable-shared --extra-libs="-lpthread -lm" --pkg-config-flags="--static" \
            --pkg-config=pkg-config
          make -j$(nproc)
          cp **/*.dll **/*.lib ${DIST_DIR}
      - name: Build Libwebsockets
        run: |
          cd ${DEPS_DIR}/libwebsockets-4.3-stable
          cmake -G Ninja -S . -B build -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_SYSROOT=${MINGW_SYSROOT} \
            -DCMAKE_C_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-clang \
            -DCMAKE_CXX_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-clang++ \
            -DCMAKE_RC_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-windres \
            -DCMAKE_AR=${MINGW_ROOT}/bin/aarch64-w64-mingw32-ar \
            -DCMAKE_RANLIB=${MINGW_ROOT}/bin/aarch64-w64-mingw32-ranlib \
            -DCMAKE_C_FLAGS="-w" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
            -DLWS_WITH_SSL=OFF -DLWS_UNIX_SOCK=OFF -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITH_SYS_SMD=OFF
          cmake --build build --parallel
          cp build/bin/libwebsockets.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libwebsockets.dll
          aarch64-w64-mingw32-dlltool -d libwebsockets.def -l ${DIST_DIR}/libwebsockets.lib -D ${DIST_DIR}/libwebsockets.dll
      - name: Build Libpng
        run: |
          cd ${DEPS_DIR}/libpng-1.6.43
          env CFLAGS="-I${MINGW_SYSROOT}/include" \
            LDFLAGS="-L${MINGW_SYSROOT}/lib" ./configure --host=aarch64-w64-mingw32
          make -j$(nproc)
          cp .libs/libpng16-16.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libpng16-16.dll
          aarch64-w64-mingw32-dlltool -d libpng16-16.def -l ${DIST_DIR}/libpng16-16.lib -D ${DIST_DIR}/libpng16-16.dll
      - name: Download VulkanRT
        run: |
          wget https://sdk.lunarg.com/sdk/download/1.3.290.0/warm/VulkanRT-1.3.290.0-Components.zip && \
          unzip VulkanRT-1.3.290.0-Components.zip && \
          cp VulkanRT-1.3.290.0-Components/vulkan-1.* ${DIST_DIR} && \
          gendef ${DIST_DIR}/vulkan-1.dll && \
          aarch64-w64-mingw32-dlltool -d vulkan-1.def -l ${DIST_DIR}/vulkan-1.lib -D ${DIST_DIR}/vulkan-1.dll
      - name: Package
        run: |
          for i in ${DIST_DIR}/*.dll; do aarch64-w64-mingw32-strip $i; done

          wget https://github.com/ddnet/ddnet-libs/archive/refs/heads/master.zip
          unzip master.zip
          export DDNET_LIBS_PATH=$(realpath ddnet-libs-master)

          rm -rf $DDNET_LIBS_PATH/curl/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/curl/windows/libarm64
          cp ${DIST_DIR}/libcurl*.dll ${DIST_DIR}/curl.lib $DDNET_LIBS_PATH/curl/windows/libarm64
          cp ${DIST_DIR}/libbrotli*.dll ${DIST_DIR}/brotli*.lib $DDNET_LIBS_PATH/curl/windows/libarm64

          rm -rf $DDNET_LIBS_PATH/ffmpeg/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/ffmpeg/windows/libarm64
          cp ${DIST_DIR}/av*.dll ${DIST_DIR}/sw*.dll ${DIST_DIR}/av*.lib ${DIST_DIR}/sw*.lib $DDNET_LIBS_PATH/ffmpeg/windows/libarm64

          rm -rf $DDNET_LIBS_PATH/freetype/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/freetype/windows/libarm64
          cp ${DIST_DIR}/libfreetype*.dll ${DIST_DIR}/freetype.lib $DDNET_LIBS_PATH/freetype/windows/libarm64

          rm -rf $DDNET_LIBS_PATH/opus/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/opus/windows/libarm64
          cp ${DIST_DIR}/libogg*.dll ${DIST_DIR}/libopus*.dll ${DIST_DIR}/libwinpthread*.dll ${DIST_DIR}/ogg.lib ${DIST_DIR}/opus.lib ${DIST_DIR}/opusfile.lib $DDNET_LIBS_PATH/opus/windows/libarm64

          rm -rf $DDNET_LIBS_PATH/png/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/png/windows/libarm64
          cp ${DIST_DIR}/libpng*.dll ${DIST_DIR}/libpng*.lib $DDNET_LIBS_PATH/png/windows/libarm64

          rm -rf $DDNET_LIBS_PATH/sdl/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/sdl/windows/libarm64
          cp ${DIST_DIR}/SDL2.dll ${DIST_DIR}/SDL2.lib $DDNET_LIBS_PATH/sdl/windows/libarm64

          rm -rf $DDNET_LIBS_PATH/sqlite3/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/sqlite3/windows/libarm64
          cp ${DIST_DIR}/libsqlite3*.dll ${DIST_DIR}/sqlite3.lib $DDNET_LIBS_PATH/sqlite3/windows/libarm64

          rm -rf $DDNET_LIBS_PATH/websockets/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/websockets/windows/libarm64
          cp ${DIST_DIR}/libwebsockets.dll ${DIST_DIR}/libwebsockets.lib $DDNET_LIBS_PATH/websockets/windows/libarm64

          rm -rf $DDNET_LIBS_PATH/vulkan/windows/libarm64
          mkdir -p $DDNET_LIBS_PATH/vulkan/windows/libarm64
          cp ${DIST_DIR}/vulkan-1.* $DDNET_LIBS_PATH/vulkan/windows/libarm64

          echo "DDNET_LIBS_PATH=$DDNET_LIBS_PATH" >> $GITHUB_ENV
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: ddnet-libs-windows-arm64-llvm-ucrt
          path: ${{ env.DDNET_LIBS_PATH }}
          compression-level: 9




      
      


