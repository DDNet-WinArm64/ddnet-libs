name: Build

on: [push]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Update System
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y build-essential cmake ninja-build curl wget pkg-config
      - name: Install MinGW
        run: |
          wget https://github.com/mstorsjo/llvm-mingw/releases/download/20240619/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar -xf llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
          echo "MINGW_ROOT=$(realpath llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/)" >> $GITHUB_ENV
          echo $(realpath llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/bin) >> $GITHUB_PATH
          echo CC=aarch64-w64-mingw32-clang >> $GITHUB_ENV
          echo CXX=aarch64-w64-mingw32-clang++ >> $GITHUB_ENV
          echo RC=aarch64-w64-mingw32-windres >> $GITHUB_ENV
          echo AR=aarch64-w64-mingw32-ar >> $GITHUB_ENV
          echo MINGW_SYSROOT=$(realpath llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/aarch64-w64-mingw32) >> $GITHUB_ENV
      - name: Download All Dependencies
        run: |
           wget http://libsdl.org/release/SDL2-2.30.5.tar.gz
           wget https://patch-diff.githubusercontent.com/raw/libsdl-org/SDL/pull/4306.diff
           wget https://curl.haxx.se/download/curl-8.8.0.tar.gz
           wget https://download.savannah.gnu.org/releases/freetype/freetype-2.13.2.tar.gz
           wget http://downloads.xiph.org/releases/ogg/libogg-1.3.5.tar.gz
           wget https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz
           wget https://downloads.xiph.org/releases/opus/opusfile-0.12.tar.gz
           wget https://www.sqlite.org/2024/sqlite-autoconf-3460000.tar.gz
           wget https://code.videolan.org/videolan/x264/-/archive/master/x264-master.tar.bz2
           wget https://ffmpeg.org/releases/ffmpeg-7.0.1.tar.gz
           wget https://github.com/warmcat/libwebsockets/archive/v4.3-stable.tar.gz
           wget https://download.sourceforge.net/libpng/libpng-1.6.43.tar.gz
           wget https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.gz
           mkdir -p deps
           cd deps
           tar xvf ../SDL2-2.30.5.tar.gz
           tar xvf ../curl-8.8.0.tar.gz
           tar xvf ../libogg-1.3.5.tar.gz
           tar xvf ../opus-1.3.1.tar.gz
           tar xvf ../opusfile-0.12.tar.gz
           tar xvf ../freetype-2.13.2.tar.gz
           tar xvf ../sqlite-autoconf-3460000.tar.gz
           tar xvf ../x264-master.tar.bz2
           tar xvf ../ffmpeg-7.0.1.tar.gz
           tar xvf ../v4.3-stable.tar.gz
           tar xvf ../libpng-1.6.43.tar.gz
           tar xvf ../zlib-1.3.1.tar.gz
           cd ..
           mkdir -p dist
           echo "DEPS_DIR=$(realpath deps)" >> $GITHUB_ENV
           echo "DIST_DIR=$(realpath dist)" >> $GITHUB_ENV
      - name: Build Zlib
        run: |
          cd ${DEPS_DIR}/zlib-1.3.1
          cmake -G Ninja -S . -B build -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_SYSROOT=${MINGW_SYSROOT} \
            -DCMAKE_C_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-clang \
            -DCMAKE_RC_COMPILER=${MINGW_ROOT}/bin/aarch64-w64-mingw32-windres \
            -DCMAKE_AR=${MINGW_ROOT}/bin/aarch64-w64-mingw32-ar \
            -DCMAKE_RANLIB=${MINGW_ROOT}/bin/aarch64-w64-mingw32-ranlib \
            -DCMAKE_C_FLAGS="-w" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
            -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY
          cmake --build build --parallel
          cp build/libzlibstatic.a ${MINGW_SYSROOT}/lib/libz.a
          cp *.h build/*.h ${MINGW_SYSROOT}/include
      - name: Build SDL2
        run: |
          cd ${DEPS_DIR}/SDL2-2.30.5
          ./configure --host=aarch64-w64-mingw32 --enable-ime 
          make -j$(nproc)
          cp build/.libs/SDL2.dll ${DIST_DIR}
          gendef ${DIST_DIR}/SDL2.dll
          aarch64-w64-mingw32-dlltool -d SDL2.def -l ${DIST_DIR}/SDL2.lib -D ${DIST_DIR}/SDL2.dll
      - name: Build cURL
        run: |
          cd ${DEPS_DIR}/curl-8.8.0
          env lt_cv_deplibs_check_method='pass_all' \
            ./configure --host=aarch64-w64-mingw32 --with-schannel \
            --enable-shared --disable-dict --disable-gopher \
            --disable-imap --disable-pop3 --disable-rtsp \
            --disable-smtp --disable-telnet --disable-tftp \
            --disable-smb --disable-ldap --enable-file --disable-static
          make -j$(nproc)
          cp lib/.libs/libcurl-4.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libcurl-4.dll
          aarch64-w64-mingw32-dlltool -d libcurl-4.def -l ${DIST_DIR}/curl.lib -D ${DIST_DIR}/libcurl-4.dll
      - name: Build Libogg
        run: |
          cd ${DEPS_DIR}/libogg-1.3.5
          ./configure --host=aarch64-w64-mingw32 
          make -j$(nproc) 
          cp src/.libs/libogg-0.dll ${DIST_DIR} 
          gendef ${DIST_DIR}/libogg-0.dll 
          aarch64-w64-mingw32-dlltool -d libogg-0.def -l ${DIST_DIR}/ogg.lib -D ${DIST_DIR}/libogg-0.dll
      - name: Build Opus
        run: |
          cd ${DEPS_DIR}/opus-1.3.1
          ./configure --host=aarch64-w64-mingw32 CFLAGS=-D_FORTIFY_SOURCE=0 
          make -j$(nproc) 
          cp .libs/libopus-0.dll ${DIST_DIR} 
          gendef ${DIST_DIR}/libopus-0.dll 
          aarch64-w64-mingw32-dlltool -d libopus-0.def -l ${DIST_DIR}/opus.lib -D ${DIST_DIR}/libopus-0.dll
      - name: Build Opusfile
        run: |
          cd ${DEPS_DIR}/opusfile-0.12
          env DEPS_LIBS="-lopus -logg -L${DIST_DIR}" \
              DEPS_CFLAGS="-I${DEPS_DIR}/opus-1.3.1/include -I${DEPS_DIR}/libogg-1.3.5/include" \
              ./configure --host=aarch64-w64-mingw32 --disable-http 
          make -j$(nproc) 
          cp .libs/libopusfile-0.dll ${DIST_DIR}
          gendef ${DIST_DIR}/libopusfile-0.dll 
          aarch64-w64-mingw32-dlltool -d libopusfile-0.def -l ${DIST_DIR}/opusfile.lib -D ${DIST_DIR}/libopusfile-0.dll

      
      


